df_Xpred
dataframes <- leerDatos(config, path)
dataframes
dim(dataframes)
dataframes
class(dataframes)
length(dataframes)
dataframes[[1]]
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
dataframes[[1]]
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[1:length(X_pred)-1]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
df_Xpred <- procesarDatos(config, dataframes)
df_Xpred
print(dataframes[[1]])
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
print(dataframes[[1]])
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[1:length(X_pred)-1]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
df_Xpred <- procesarDatos(config, dataframes)
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
print(df)
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[1:length(X_pred)-1]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
df_Xpred <- procesarDatos(config, dataframes)
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
df
t(df)
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = T,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
return(merged_df)
}
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
t(df)
merge_dataframes(dataframes)
t(merge_dataframes(dataframes))
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = T,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
return(merged_df)
}
t(merge_dataframes(dataframes))
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
return(merged_df)
}
t(merge_dataframes(dataframes))
t(merge_dataframes(dataframes))[1]
t(merge_dataframes(dataframes))[,1]
t(merge_dataframes(dataframes))[,3:1]
merge_dataframes(dataframes)
merge_dataframes(dataframes)[3:1,]
t(merge_dataframes(dataframes)[3:1,])
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
# Invertimos
merged_df <- merged_df[ncol(merged_df):1, ]
return(merged_df)
}
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[1:length(X_pred)-1]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
inputarNansApp(path)
path <- '~\\GitHub\\ProyectoR - copia\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
config <- leerConfig(path)
dataframes <- leerDatos(config, path)
df_Xpred <- procesarDatos(config, dataframes)
df_Xpred
dataframes <- leerDatos(config, path)
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
df
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
merged_df
t(merged_df)
t(merged_df)
merged_df[nrow(merged_df):1,]
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
# Invertimos
merged_df <- merged_df[nrow(merged_df):1, ]
#t(merged_df)
#merged_df[nrow(merged_df):1,]
return(merged_df)
}
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
df
t(df)
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
# Invertimos
merged_df <- merged_df[nrow(merged_df):1, ]
#t(merged_df)
#merged_df[nrow(merged_df):1,]
return(merged_df)
}
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
t(df)
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[1:length(X_pred)-1]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
path <- '~\\GitHub\\ProyectoR - copia\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
dataframes <- leerDatos(config, path)
df_Xpred <- procesarDatos(config, dataframes)
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
df
t(df)
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
# Invertimos
merged_df <- merged_df[nrow(merged_df):1, ]
#t(merged_df)
#merged_df[nrow(merged_df):1,]
return(merged_df)
}
dataframes <- leerDatos(config, path)
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
t(df)
t(df)
t(df)
dataframes <- leerDatos(config, path)
df_Xpred <- procesarDatos(config, dataframes)
model <- generarModelo(df_Xpred[[1]])
y_pred <- generarOutput(model, df_Xpred[[2]])
print(paste('Predicción de:', config$output$pred_csv,
'para', config$output$country,
'en', config$output$year,
'es:', y_pred))
t(df)
#t(df)
#t(df)
# Sacamos X_pred
df[, as.character(config$output$year)]
X_pred[1:length(X_pred)-1]
#t(df)
#t(df)
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[1:length(X_pred)-1]
X_pred
#t(df)
#t(df)
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred
X_pred[2:length(X_pred)]
X_pred <- X_pred[2:length(X_pred)]
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
#t(df)
#t(df)
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[2:length(X_pred)]
#X_pred[2:length(X_pred)]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
model
path <- '~\\GitHub\\ProyectoR - copia\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
config <- leerConfig(path)
dataframes <- leerDatos(config, path)
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
t(df)
config <- leerConfig(path)
dataframes <- leerDatos(config, path)
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
dataframes
dataframes[1]
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
df
t(df)
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
# Invertimos
merged_df <- merged_df[nrow(merged_df):1, ]
#t(merged_df)
#merged_df[nrow(merged_df):1,]
return(merged_df)
}
config <- leerConfig(path)
dataframes <- leerDatos(config, path)
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
t(df)
# Main function
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
#t(df)
#t(df)
#t(df)
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[2:length(X_pred)]
#X_pred[2:length(X_pred)]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
# Support functions
# Creamos nombre de columnas
get_columns_names <- function(dfs) {
columns_names <- c()
for (i in seq(length(dfs))) {
if (i == 1){
columns_names[i] <- 'Y'
} else {
columns_names[i] <- paste0('X', i-1)
}
}
return(columns_names)
}
#Aislamos el país que queremos predecir
isolate_dataframes_country <- function(dfs) {
for (i in seq(length(dfs))) {
dfs[[i]] <- dfs[[i]][config$output$country, ]
}
return(dfs)
}
# Combinamos dataframes
merge_dataframes <- function(dfs) {
merged_df <- Reduce(function(x, y, ...) merge(x,
y,
rigth = F,
by = intersect(names(x), names(y)),
all = TRUE, ...), dfs)
# Invertimos
merged_df <- merged_df[nrow(merged_df):1, ]
#t(merged_df)
#merged_df[nrow(merged_df):1,]
return(merged_df)
}
# Comprobamos dimension
check_merged_dimension <- function(df){
size <- dim(df)[1]
if (size < 4) {
return(list(FALSE, size))
} else {
return(list(TRUE, size))
}
}
path <- '~\\GitHub\\ProyectoR - copia\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
train_test_split <- function(df) {
smp_size <- floor(0.75 * nrow(df))
set.seed(42)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
model$model
summary(model)
generarOutput <- function(model, X_pred) {
X_pred <- as.data.frame(t(X_pred))
names(X_pred) <- names(model$model)[-1]
y_pred <- predict(model, X_pred)
print(paste('Predicción de:', config$output$pred_csv,
'para', config$output$country,
'en', config$output$year,
'es:', y_pred))
print(summary(model))
return(y_pred)
}
path <- '~\\GitHub\\ProyectoR - copia\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
inputarNansApp(path)
generarOutput <- function(model, X_pred) {
X_pred <- as.data.frame(t(X_pred))
names(X_pred) <- names(model$model)[-1]
y_pred <- predict(model, X_pred)
print(summary(model))
print(paste('Predicción de:', config$output$pred_csv,
'para', config$output$country,
'en', config$output$year,
'es:', y_pred))
return(y_pred)
}
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
path <- '~\\GitHub\\gapminder-data-predicter\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
path <- '~\\GitHub\\gapminder-data-predicter\\'
setwd(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp(path)
lapply(paste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
leerDatos <- function(config, path) {
dfs <- list()
year <- config$output$year
country <- config$output$country
for (i in seq(length(config$input$csv)+1)) {
# Para Y
if (i == 1){
df_path <- paste0(path, 'data\\', config$output$pred_csv)
df <- validateY(df_path, country, year)
dfs[[i]] <- df
} else {
# Para las X
df_path <- paste0(path, 'data\\', config$input$csv[i-1])
if (!validateX(df_path, country, year)[[1]]) {
next
} else {
dfs[[i]] <- validateX(df_path, country, year)[[2]]
}
}
}
num_df <- length(dfs)
if (num_df<2) {
logerror('El programa no tiene suficientes datos para predecir.',
logger = 'log')
stop('Fin')
} else {
loginfo(paste('Vas a predecir con', num_df,'de',
length(config$input$csv)+1, 'dataframes.'))
return(dfs)
}
}
procesarDatos <- function(config, dataframes) {
dataframes <- isolate_dataframes_country(dataframes) # Nos quedamos solo con country
df <- merge_dataframes(dataframes) # Combinamos en un único dataframe
# Sacamos X_pred
X_pred <- df[, as.character(config$output$year)]
X_pred <- X_pred[2:length(X_pred)]
# Eliminamos nans y trasponemos
df <- t(df[, colSums(is.na(df)) == 0])
check_size <- check_merged_dimension(df)
if (!check_size[[1]]) {
logerror(paste0("El dataframe no tiene suficientes datos como para predecir,
prueba con otros. Tamaño: ", check_size[[2]]),
logger = 'log')
stop()
}
colnames(df) <- get_columns_names(dataframes) # Ponemos nombre a las columnas
return(list(df, X_pred))
}
generarModelo <- function(df) {
# Convertimos a tipo dataframe
df <- as.data.frame(df)
# Separamos X e y
X <- df[,2:ncol(df)]
y <- df[,1]
# Generamos el modelo
model <- lm(y ~., X)
return(model)
}
train_test_split <- function(df) {
smp_size <- floor(0.75 * nrow(df))
set.seed(42)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
return(list(train, test))
}
aste0('R\\', list.files(path = 'R\\', recursive = TRUE)), source)
inputarNansApp
